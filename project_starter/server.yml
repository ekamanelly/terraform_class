
Parameters:
# doesn't need a json parameter file 
   InfrastructureName:
      Default: Udegram
      Type: String

Resources:
  ServerTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId:
          Fn::ImportValue: !Sub "${InfrastructureName}-VPC"
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: 
            Ref: ServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServerTargetGroup
      LoadBalancerArn: !Ref ServerLoadBalancer
      Port: '80'
      Protocol: HTTP  

  ServerLoadBalancer:     
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      # Type: network
      SecurityGroups: 
        - Ref: LoadBalanceSecGroup 
      Subnets: 
        - Fn::ImportValue: !Sub "${InfrastructureName}-LoadBalancePublicSubnet2"
        - Fn::ImportValue: !Sub "${InfrastructureName}-LoadBalancePublicSubnet1"
      Tags: 
        - Key: Name
          Value: load balance for server instances 

  LoadBalanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
      # - IpProtocol: tcp
      #   FromPort: 8080
      #   ToPort: 8080
      #   CidrIp: 0.0.0.0/0             
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: 22
      #   ToPort: 22
      #   CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash
         apt-get update -y
         apt-get install apache2 -y
         systemctl start apache2.service
         cd /var/www/html
         echo "Udacity Demo Web Server Up and Running!" > index.html         
      # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: ami-08d4ac5b634553e16
      # ToDo: Change the key-pair name, as applicable to you. 
      
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${InfrastructureName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: ServerLaunchConfig
      MinSize: '2'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: ServerTargetGroup


Outputs:
  LBdomain:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Join ["",['http://', !GetAtt ServerLoadBalancer.DNSName]] #thanks for the insight
    Export:
      Name: !Sub ${InfrastructureName}-lbDomain
